# docker-compose.prod.yml
# Service Üretim (Production) ortamı

networks:
  sentiric-net:
    name: "${NETWORK_NAME:-sentiric-net}"
    driver: bridge
    ipam:
      config:
        - subnet: ${NETWORK_SUBNET}
          gateway: ${NETWORK_GATEWAY}

volumes:
  # [capability-tts]: Konuşma Sentezleme Yetenekleri (TTS Capabilities)
  # --------------------------------------------------            
  tts-coqui-model-cache:
services:
  # [capability-tts]: Konuşma Sentezleme Yetenekleri (TTS Capabilities)
  # -------------------------------------------------- 
  tts-coqui-service:
    # --- İMAJ SEÇİMİ (EN ÖNEMLİ KISIM) ---
    # Ortamınıza göre doğru imajı seçin. GitHub Actions CI/CD sürecinizde
    # hem CPU (-cpu) hem de GPU (-gpu) için ayrı etiketli imajlar üretilmelidir.
    # Örnek: ghcr.io/sentiric/sentiric-tts-coqui-service:latest-cpu
    #        ghcr.io/sentiric/sentiric-tts-coqui-service:latest-gpu
    #
    # TAG ortam değişkeni ile bu dinamik olarak yönetilebilir.
    # Örnek: TAG=latest-gpu make start PROFILE=prod
    image: ghcr.io/sentiric/sentiric-tts-coqui-service:latest-gpu

    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]
    env_file: ["${ENV_FILE_PATH}"]
    volumes: 
      - "${CONFIG_REPO_PATH}:/sentiric-config:ro"
      - "${CERTIFICATES_REPO_PATH}:/sentiric-certificates:ro"
      - "${ASSETS_REPO_PATH}:/sentiric-assets:ro"
      # YENİ: Model cache'ini volume'a bağla
      - tts-coqui-model-cache:/home/appuser/.local/share/tts
    ports: 
      - "14030:${TTS_COQUI_SERVICE_HTTP_PORT:-14030}"
      - "14031:${TTS_COQUI_SERVICE_GRPC_PORT:-14031}"
      - "14032:${TTS_COQUI_SERVICE_METRICS_PORT:-14032}"          
    networks:
      sentiric-net:
        ipv4_address: ${TTS_COQUI_SERVICE_IPV4_ADDRESS}       
    restart: always